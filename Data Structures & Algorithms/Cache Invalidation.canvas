{
	"nodes":[
		{"id":"e5fb45ad670a0614","type":"text","text":"least recently used","x":-540,"y":-439,"width":210,"height":60},
		{"id":"71fbe63774c2bfa9","type":"text","text":"#### LRU Cache","x":-224,"y":-439,"width":177,"height":60},
		{"id":"10b247dec221b176","type":"text","text":"[相關文章](https://redis.com/glossary/lru-cache/)","x":-470,"y":-550,"width":140,"height":60},
		{"id":"e8b7b26e76781ed0","type":"text","text":"實作","x":-876,"y":-183,"width":88,"height":60},
		{"id":"6b69ef02eb3c6368","type":"text","text":"有些程式語言中原生就有 lined hash map，比如 Java 的 `LinkedHashMap` 與 Python 的 `OrderedDict`","x":-1306,"y":-43,"width":279,"height":141},
		{"id":"e0a1810ad6ea93b6","type":"text","text":"變體","x":-23,"y":-178,"width":88,"height":60},
		{"id":"80a1bd048117b004","type":"text","text":"應用","x":-470,"y":-178,"width":88,"height":60},
		{"id":"8834d09658708173","type":"text","text":"- 瀏覽器暫存網頁\n- OS 分配 memory page\n- [[CDN]]\n- Database cache","x":-547,"y":-33,"width":243,"height":191},
		{"id":"9b41ba365c225fb7","type":"text","text":"多一個 doubly-linked list 紀錄順序","x":-939,"y":-7,"width":215,"height":70},
		{"id":"ab0121db7a7fded0","type":"text","text":"可以更好的地方：\n\n- Fallback action in the `get` method when \"cache missed\"\n- Assure thread safety\n- Set TTL (time to live)\n","x":-1083,"y":2519,"width":504,"height":212},
		{"id":"80612e3000c36eba","type":"text","text":"```Python\nfrom collections import OrderedDict\n\ntype primary = str | int | float | tuple[primary, ...]\n\n\nclass LRUCache:\n    def __init__(self, size: int) -> None:\n        self.max_size = size\n        self.__storage = OrderedDict()\n    \n    @property\n    def size(self) -> int:\n        return len(self.__storage)\n    \n    def get(self, key: primary):\n        value = self.__storage[key]\n        self.set(key, value)\n        return value\n    \n    def set(self, key: primary, value) -> None:\n        self._storage.pop(key, None)\n        if self.size >= self.max_size:\n            self.__storage.popitem(last=False)\n        self.__storage[key] = value\n```","x":-1170,"y":1769,"width":677,"height":618},
		{"id":"44d1fc4842b1ea2f","x":-1199,"y":317,"width":737,"height":1242,"type":"text","text":"```Python\ntype primary = str | int | float | tuple[primary, ...]\n\nclass Node:\n    def __init__(self, key: primary, value) -> None:\n        self.key = key\n        self.value = value\n        self.prev: Node | None = None\n        self.next: Node | None = None\n\n\nclass LRUCache:\n    def __init__(self, size: int) -> None:\n        self.max_size = size\n        self.__storage = {}\n        self.__head: Node | None = None\n        self.__tail: Node | None = None\n\n    @property\n    def size(self) -> int:\n        return len(self.__storage)\n\n    def get(self, key: primary):\n        value = self.__storage[key].value\n        self.set(key, value)\n        return value\n\n    def set(self, key: primary, value) -> None:\n        # remove old node from the hash map and the linked list if found\n        if old_node := self.__storage.pop(key, None):\n            if self.__head and old_node is self.__head:\n                self.__head = self.__head.next\n            else:\n                old_node.prev.next = old_node.next\n            if self.__tail and old_node is self.__tail:\n                self.__tail = self.__tail.prev\n            else:\n                old_node.next.prev = old_node.prev\n\n        # remove head if capacity is full\n        if self.size >= self.max_size and self.__head:\n            del self.__storage[self.__head.key]\n            self.__head = self.__head.next\n\n        # create new node, put it into the hash map and the linked list\n        new_node = Node(key, value)\n        self.__storage[key] = new_node\n        if not self.__head or not self.__tail:\n            self.__head = self.__tail = new_node\n        else:\n            new_node.prev = self.__tail\n            self.__tail.next = new_node\n            self.__tail = self.__tail.next\n```"},
		{"id":"626cc11e548d08dd","type":"text","text":"```Python\nfrom collections import OrderedDict\nfrom threading import Lock\nfrom typing import Any, Callable\n\ntype primary = str | int | float | tuple[primary, ...]\n\n\nclass LRUCache:\n    def __init__(self, size: int) -> None:\n        self.max_size = size\n        self.__storage = OrderedDict()\n        self.__lock = Lock()\n    \n    @property\n    def size(self) -> int:\n        return len(self.__storage)\n    \n    def get(self, key: primary, fallback: Callable | None = None) -> Any:\n        try:\n            result = self.__storage[key]\n        except KeyError:\n            if fallback is None:\n                raise Exception(\"Cache missed, and no fallback was provided.\")\n            result = fallback()\n        self.set(key, result)\n        return result\n\n    def set(self, key: primary, value: Any) -> None:\n        with self.__lock:  # assure thread safety\n            if self.size >= self.max_size:\n                self._storage.popitem(last=False)\n            self.__storage[key] = value\n```","x":-1226,"y":2841,"width":791,"height":796},
		{"id":"79630be707ab58d6","type":"text","text":"Low Inter-reference Recency Set (LIRS)","x":65,"y":-43,"width":222,"height":70},
		{"id":"c3ef557e64f21c1a","type":"text","text":"2-queue algorithm","x":-239,"y":-33,"width":209,"height":60},
		{"id":"a60e47b118e791bf","type":"text","text":"Segmented LRU (SLRU)","x":-62,"y":97,"width":257,"height":60},
		{"id":"efc9b444fe32d757","type":"text","text":"Adaptive Replacement Cache (ARC)","x":-221,"y":218,"width":242,"height":70},
		{"id":"cf1e23f2491f1a52","type":"text","text":"[相關文章](https://redis.com/glossary/cache-invalidation/)","x":460,"y":-944,"width":140,"height":60},
		{"id":"ae2367a7bbcaafba","type":"text","text":"## Cache  Invalidation","x":375,"y":-782,"width":309,"height":76},
		{"id":"fb21c9e490fd47bf","type":"text","text":"Cache 可以使用 hash map 實作","x":-78,"y":-774,"width":307,"height":60},
		{"id":"46cc83bda5c9aaab","type":"text","text":"在有限的空間中決定要將哪些資料 cache，以極大化 cache hit 的機率","x":928,"y":-796,"width":247,"height":105},
		{"id":"2de27ce6d945c0e2","type":"text","text":"又叫 cache eviction","x":928,"y":-932,"width":213,"height":60},
		{"id":"b9cf4e474ec87dde","type":"text","text":"least frequently used","x":1065,"y":-519,"width":229,"height":60},
		{"id":"c05fd1b6fec3d86e","type":"text","text":"#### LFU Cache","x":796,"y":-429,"width":175,"height":60},
		{"id":"0302a51d5d88567f","type":"text","text":"缺點：有可能存在一些因為過去很常被使用而在 cache 裡有很高 priority 的資料，這些資料可能現在不再需要了","x":1097,"y":-399,"width":249,"height":177},
		{"id":"0fbbd9d25a5f23b2","type":"text","text":"實作","x":840,"y":-148,"width":88,"height":60},
		{"id":"e2fd4ef3a4992525","type":"text","text":"多一個 hash map 紀錄每個 key 的使用次數","x":767,"y":98,"width":234,"height":70},
		{"id":"924ef5f113840eeb","type":"text","text":"```Python\n```","x":759,"y":267,"width":250,"height":60},
		{"id":"4f2ad4230ce2e802","type":"text","text":"其實自從 Python3.7 後，一般的 `dict` 就是有序的，但是 `dict` 不支援從「頭」拿東西","x":-1694,"y":-25,"width":292,"height":105}
	],
	"edges":[
		{"id":"ed24469fb7940a6f","fromNode":"ae2367a7bbcaafba","fromSide":"bottom","toNode":"71fbe63774c2bfa9","toSide":"top"},
		{"id":"636fc09b16a95b24","fromNode":"71fbe63774c2bfa9","fromSide":"left","toNode":"e5fb45ad670a0614","toSide":"right"},
		{"id":"2236bdc83df279af","fromNode":"ae2367a7bbcaafba","fromSide":"right","toNode":"2de27ce6d945c0e2","toSide":"left"},
		{"id":"b8aa0dfa3b8fe157","fromNode":"ae2367a7bbcaafba","fromSide":"right","toNode":"46cc83bda5c9aaab","toSide":"left"},
		{"id":"5e2b82f6c1e32045","fromNode":"ae2367a7bbcaafba","fromSide":"bottom","toNode":"c05fd1b6fec3d86e","toSide":"top"},
		{"id":"368c9f37792529a0","fromNode":"c05fd1b6fec3d86e","fromSide":"right","toNode":"b9cf4e474ec87dde","toSide":"left"},
		{"id":"dc031bb350912ced","fromNode":"71fbe63774c2bfa9","fromSide":"bottom","toNode":"e8b7b26e76781ed0","toSide":"top"},
		{"id":"071fd0db56e9a091","fromNode":"9b41ba365c225fb7","fromSide":"bottom","toNode":"44d1fc4842b1ea2f","toSide":"top","label":"Python"},
		{"id":"e3b687d0106910ec","fromNode":"c05fd1b6fec3d86e","fromSide":"bottom","toNode":"0fbbd9d25a5f23b2","toSide":"top"},
		{"id":"e6b7fc0f699e6b0a","fromNode":"e2fd4ef3a4992525","fromSide":"bottom","toNode":"924ef5f113840eeb","toSide":"top","label":"Python"},
		{"id":"7be583003f8be875","fromNode":"9b41ba365c225fb7","fromSide":"left","toNode":"6b69ef02eb3c6368","toSide":"right"},
		{"id":"16587278fde98833","fromNode":"6b69ef02eb3c6368","fromSide":"left","toNode":"4f2ad4230ce2e802","toSide":"right"},
		{"id":"8f624ecce8c9810c","fromNode":"80612e3000c36eba","fromSide":"bottom","toNode":"ab0121db7a7fded0","toSide":"top"},
		{"id":"722f7d08f546ba94","fromNode":"ab0121db7a7fded0","fromSide":"bottom","toNode":"626cc11e548d08dd","toSide":"top"},
		{"id":"d908e912bcf787d8","fromNode":"71fbe63774c2bfa9","fromSide":"left","toNode":"10b247dec221b176","toSide":"right"},
		{"id":"b19625aa79087cca","fromNode":"e8b7b26e76781ed0","fromSide":"bottom","toNode":"9b41ba365c225fb7","toSide":"top"},
		{"id":"df73b8072f4db12a","fromNode":"71fbe63774c2bfa9","fromSide":"bottom","toNode":"80a1bd048117b004","toSide":"top"},
		{"id":"3da80421a2dfd51a","fromNode":"80a1bd048117b004","fromSide":"bottom","toNode":"8834d09658708173","toSide":"top"},
		{"id":"4e47259e9a1e027e","fromNode":"ae2367a7bbcaafba","fromSide":"top","toNode":"cf1e23f2491f1a52","toSide":"bottom"},
		{"id":"2ed2ba7e15eae5ff","fromNode":"c05fd1b6fec3d86e","fromSide":"right","toNode":"0302a51d5d88567f","toSide":"left"},
		{"id":"a03a363d1915a75f","fromNode":"0fbbd9d25a5f23b2","fromSide":"bottom","toNode":"e2fd4ef3a4992525","toSide":"top"},
		{"id":"17d4e86737676c7d","fromNode":"71fbe63774c2bfa9","fromSide":"bottom","toNode":"e0a1810ad6ea93b6","toSide":"top"},
		{"id":"39467c7efb5278da","fromNode":"e0a1810ad6ea93b6","fromSide":"bottom","toNode":"c3ef557e64f21c1a","toSide":"top"},
		{"id":"41a94725f764fc45","fromNode":"e0a1810ad6ea93b6","fromSide":"bottom","toNode":"79630be707ab58d6","toSide":"top"},
		{"id":"06f888e9f6f27943","fromNode":"e0a1810ad6ea93b6","fromSide":"bottom","toNode":"a60e47b118e791bf","toSide":"top"},
		{"id":"c05341799ded7423","fromNode":"e0a1810ad6ea93b6","fromSide":"bottom","toNode":"efc9b444fe32d757","toSide":"top"},
		{"id":"39bdfc765684d83c","fromNode":"44d1fc4842b1ea2f","fromSide":"bottom","toNode":"80612e3000c36eba","toSide":"top","label":"改用 OrderedDict"}
	]
}