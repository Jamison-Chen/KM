{
	"nodes":[
		{"id":"e7a79b5c5d12c54d","type":"group","x":-1080,"y":-240,"width":2163,"height":780,"label":"Week 1"},
		{"id":"97b8ccb00cd732b1","x":-1081,"y":1360,"width":2163,"height":640,"type":"group","label":"Week3"},
		{"id":"3f1e37623cea491e","type":"group","x":-1081,"y":660,"width":1767,"height":605,"label":"Week2"},
		{"type":"text","text":"## 專業敏銳度  \n  \n- 站在交付出零失誤結果角度，事先預想出哪些點可能會失敗，並逐一避開的能力\n- 遇到錯誤後，去考慮到可能需要做出補救措施的能力\n\n1. 完全理解交付的目標和需求，包括相關的細節和期望結果。\n2. 將交付過程分解為不同的階段或步驟，以更清晰地定義可能的失敗點。\n3. 對於每個步驟，考慮可能的風險和失敗情境，並確定每個失敗情境的潛在影響，包括對交付結果和時間表的影響。 \n4. 為每個失敗情境制定防範措施，探討如何避免潛在問題，並將這些措施納入計劃。該防範措施必須要能：\n    - 有效杜絕以前犯過的錯及防止問題本身。\n    - 不造成其他新問題產生。 \n    - 不 over engineering（要能符合比例原則，如不能花五天時間去彌補一個本身做起來只要五分鐘的解決方案，而拋棄另一個十分鐘做完不會有那個危險性的方案）。\n5. 在實際發生錯誤後，應驗證錯誤的性質和影響，判斷是否需要立即採取補救措施，與主管討論、取得同意後，於 Asana 留下文字處理紀錄。","id":"3132dfd85ae7e940","x":-381,"y":-990,"width":803,"height":661},
		{"type":"text","text":"## 定義問題（能找到問題癥結點）並提供解決方案\n\n- 將現況有脈絡地拆解並逐一提出合理質疑的能力\n- 在提出假設後自我驗證的能力\n- 找尋問題時逐一縮小搜尋範圍的能力\n\n1. 確保充分理解現況，包括操作流程、相關程式碼、可供重現問題的資訊，和可能會受此影響之團隊或客戶及關係人。  \n2. 將現況分解成不同的步驟或階段，以更清晰地看到每個部分的細節及辨認可能的問題點。  \n3. 針對不同的步驟或階段提出符合現狀的質疑並分析。  \n4. 提出假設後需思考若假設為真，應該有什麼樣的結果，積極搜集相關資料和證據並實際驗證。  \n5. 逐一排除假設後應能進一步縮限問題搜尋範圍，找出問題後提供後續 actions，與主管討論，並取得同意。","id":"bbfdc23eb8ca95c0","x":-1061,"y":-990,"width":600,"height":601},
		{"type":"text","text":"## 有效地合作與溝通  \n  \n- 對於 issue 的基本資訊與期待收集能力\n- 即時止損求助的能力\n- 橫向佈達資訊的能力\n\n1. 按照 [Dev Guide - User Issue Troubleshooting SOP  \n](https://sites.google.com/pinkoi.com/epd-wiki/home/dev-guide/for-all-engineers/%E7%A9%A9%E5%AE%9A%E6%80%A7/issue-troubleshooting)步驟處理需要即時回覆的 User Issue Troubleshooting 案件。\n2. 在開始處理問題前，與回報對象收集問題的基本資訊（如：uid、發生路徑、發生步驟等）以及緊急程度（如：影響是什麼、需要在什麼時候之前處理完）。\n3. 收集完後找出問題、分析損害程度並提供後續 actions，與主管討論，並取得同意。\n4. 若判斷自己無法在與主管達成共識的時程內完成期待時，需即時回報主管。\n5. 身為問題解決方，在處理狀態或是 spec 上有變動時，需在 Asana 中留下文字向 stakeholders 說明並確保對方理解一致。","id":"a4387d75e3d5f928","x":482,"y":-990,"width":580,"height":661},
		{"type":"text","text":"## 限購機制不支援多規格商品\n\n#### 定義問題\n\n- 有回報過往的限購活動有人每個規格都買 -> 在 local 重現問題 -> 猜測限購機制不支援多規格商品 -> 從 code 觀察到限購機制不支援多規格商品 -> 和 Dixon 確認\n- 在 local 重現問題時，也觀察到商品頁與購物車的 quantity picker 會無視限購數量 -> 確認僅多規格商品會有此問題 -> 從程式碼得知商品頁的問題出在前端 -> 與主管討論，請求前端支援\n\n#### 專業敏銳度\n\n- 在收到限購商品的任務時，先檢查是否有多規格商品，第一時間通知需求方，避免之前發生過的問題再次出現\n- 從多個可能的解決方法中選擇成本最小且可以符合實際需求的那個（當時想到的方法包括 1. 事後搬移評論 2. 在一天內修正商品頁與購物車的 quantity picker）\n\n#### 有效合作與溝通\n\n- 告知需求方限購機制不支援多規格商品，並留下詳細的資訊於 Asana\n- 與前端、APP 共同釐清 quantity picker 問題時，於 Asana 留下討論紀錄\n","id":"7a05e1a589f7fca0","x":-1060,"y":-220,"width":700,"height":740,"color":"4"},
		{"id":"61bbe85b5d6a586e","type":"text","text":"## 在設計館後台中將 EPD 代設定的 Coupon 隱藏\n\n#### 定義問題\n\n- 從 Slack 對話紀錄爬梳並理解什麼是 EPD 代設定的 coupon\n- 找有經驗的隊友釐清過往 EPD 如何代設定 coupon\n\n#### 專業敏銳度\n\n- 一開始收到的建議是用 memo 判斷是否為 EPD 代設定，但後來發現有更適合的 creator_uid 可以使用\n\n#### 有效合作與溝通\n\n- 與主管和隊友討論使用 memo, creator_uid 各自的風險與可行性\n- 即時將資訊更新於 Asana\n","x":-280,"y":-220,"width":640,"height":609,"color":"4"},
		{"id":"32a7b66254d26049","type":"text","text":"## Coupon Tool 增加 Tier Filter\n\n#### 專業敏銳度\n\n- 即時交付\n- 在增加新功能時，沒有對既有功能造成影響或劇烈改動\n\n#### 有效合作與溝通\n\n- 上線前與需求方做最終確認，並將新功能的使用方式詳細記錄於 Asana\n","x":423,"y":-220,"width":640,"height":400,"color":"4"},
		{"id":"35c08a3441b6e408","type":"text","text":"## 客人未成功套用活動\n\n[Slack](https://pinkoi.slack.com/archives/C029LCTP6/p1694423813742609)\n\n#### 定義問題\n\n流程：確認訂單金額 (orders) -> 確認下單時的 region 是否符合資格 (orders_meta) -> 確認使用的卡對不對 (pinkoi_pay_payment) -> 確認商品是否 deduction is not applicable -> 確認是否有導購 (orders::campaign) -> 下單時是否還有名額 (campaign_credit_card) -> 未發現異常 -> login as buyer，確認可以套用 -> 回覆 CS -> 開 task","x":-1061,"y":680,"width":485,"height":480,"color":"4"},
		{"id":"9e51f78cc2de2a78","type":"text","text":"## 解除商品限購\n\n[[GCP - 限購機制] 一元體驗活動 - 設定 tid 每個會員帳號限購一個](https://app.asana.com/0/1192062389257553/1205399617014277/f)\n\n#### 有效合作與溝通\n\n與 Lydia 確認過活動結束後可以將商品解除限購後，即時將商品解除限購，並將資訊同步於 Asana。\n","x":180,"y":680,"width":486,"height":365,"color":"4"},
		{"id":"f5c97ea75f664a19","type":"text","text":"## Campaign Registration 登錄機制\n\n[[DEV] Campaign Registration 登錄機制](https://app.asana.com/0/0/1205090253200520/f)\n\n#### 專業敏銳度\n\n- 當隊友提出目前後端不支援的 REST API 格式時，即時告知並提出其他解決方法\n\n#### 有效合作與溝通\n\n- 在 Slack 與 Asana task 中積極與其他隊友討論 API 的格式，提出不同方案供隊友選擇\n- 發現顯示在 topic page 的登記日期並不適合請 BD 每週去更新，應該由後端自動算，主動提出並與 PD、FE 討論\n","x":-461,"y":680,"width":568,"height":565,"color":"4"},
		{"id":"1558b99ffa236178","type":"text","text":"## 登錄機制 - 定義問題\n\n- 當發現「同一個使用者使用兩個裝置點擊登錄時顯示的 dialog 與預期不符」時，立刻找到問題癥結點並提出「應先判斷使用者是否已登錄，再判斷活動是否已額滿」這個解決方法\n- 在處理「部分使用者沒收到 NC」的 bug 時，依照以下脈絡逐一提出質疑並檢驗\n    - 是否是開發機的 Celery 沒開？\n        - 觀察到同時間的其他使用者有收到 NC，所以排除此可能性\n    - 由於在多個使用者中，只有一個人沒有成功收到 NC，所以懷疑是否是 profile 中的設定把 NC 關掉\n        - 經主管提醒以及後續自己調查程式碼，發現 profile 沒有把 NC 關掉的選項，所以排除此可能性\n    - 是否是程式邏輯錯誤導致部分情況下沒有進到送 NC 的 code block\n        - 使用 Postman 直接打登錄 API 測試時發現，原本的程式寫法在連續打兩次登錄 API 時，第二個 request 不會觸發 Celery task（原本的寫法是 model_m::function_a -> celery task -> model_m::function_b）因此決定重構程式碼為 model_m::function_a -> celery task，再次實測發現可以解決上述問題，至於原因仍在調查","x":-1061,"y":1380,"width":861,"height":600,"color":"4"},
		{"id":"66bc1e064bfab420","type":"text","text":"## 登錄機制 - 專業敏銳度\n\n- 本來設定 weekday 的方式是使用 int，經主管提醒後發覺這樣很有可能造成不熟悉此模組的人設定錯誤，為避免此情形，後來改用 dict 的方式將 int map 為較好理解的英文縮寫（如 MON, TUE…）\n- 主動發現成功登記時的 dialog 內文有一點奇怪（本來叫「你已成功登記名額。」），提出修改建議並與 Shelly 討論後改為「你已成功登記」\n- 當決定日期的呈現方式由 yyyy/mm/dd HH:MM 改為 mm/dd (w) HH:MM 時，主動發現「週」的部分會需要送翻譯並提醒 Shelly\n- 在設計 registration_campaign 模組時，注意到須限制以週為單位的週期性活動的購買期間與登記期間在同一週內，否則以現有的活動設定方式來說，在發送獎勵時會不知道要拿哪一週的「購買人」與哪一週的「登記人」作為發送的依據","x":-120,"y":1380,"width":542,"height":560,"color":"4"},
		{"id":"1f740a80ce4486cf","type":"text","text":"## 登錄機制 - 有效合作與溝通\n\n- 主動設想到 client side 隊友在測試階段應會頻繁地測試登錄，為避免需要一直建立新帳號測試，或者需要頻繁地要求後端手動清空資料，造成開發上不順，因此提供測試階段專用的 unregister API\n- 針對「過期的活動不應顯示登錄區塊」這項需求，主動提出可能的實作方法並與 client side 隊友討論，並且於蒐集建議後找到更好的實作方法（[link](https://app.asana.com/0/0/1205090253200520/1205535635815679/f)）\n- 針對「NC 的 cat_key 應為 `campaign`, `personal` 或 `registration`」與主管討論，達成共識後（使用 `campaign`）記錄於 Asana","x":482,"y":1380,"width":580,"height":440,"color":"4"},
		{"id":"458f665752bd3822","x":-381,"y":-1520,"width":803,"height":480,"type":"text","text":"## 專業敏銳度\n\n- 站在交付出零失誤結果角度，事先預想出哪些點可能會失敗，並逐一避開的能力\n    - 在登錄機制推上正式機前，為避免失誤所以決定在 local 的 dev branch 進行最終測試，但 `make dev-assets` 時失敗，才發現前端有檔案修改不完整，即時通知 CK，修正後問題解決\n    - 第一版本登錄機制上線時，暫時將相關 API 限制為 admin tester only，保留在正式機上測試的空間，目的為確保流程在正式機上也可以順利進行"},
		{"id":"33f616c45b7d0416","x":482,"y":-1520,"width":580,"height":480,"type":"text","text":"## 有效地合作與溝通  \n\n- 橫向佈達資訊的能力\n    - 情境：Echo 提出必須將所有「登記」字樣改成「登錄」，Alexandra 提到必須多等一個禮拜才能將修改後的文字上線\n    - Action：即時向 Echo 確認是否可以第一週先顯示「登記」，後面再改回「登錄」，並 sync 回 Asana\n- 對於基本資訊與期待的收集能力\n    - Anniversary coupon"}
	],
	"edges":[]
}